// Definitions of all message types that appear in LaaS public API _only_.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: laas/v1/dto.proto

package v1

import (
	v1 "github.com/deliveryhero/logistics-customer/domain/v1"
	v11 "github.com/deliveryhero/logistics-customer/dynamicpricing/v1"
	v12 "github.com/deliveryhero/logistics-customer/timeestimation/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Geo-constraints driven vendor availability.
type CustomerVendorGeoStatus int32

const (
	CustomerVendorGeoStatus_CUSTOMER_VENDOR_GEO_STATUS_INVALID               CustomerVendorGeoStatus = 0
	CustomerVendorGeoStatus_CUSTOMER_VENDOR_GEO_STATUS_AVAILABLE             CustomerVendorGeoStatus = 1
	CustomerVendorGeoStatus_CUSTOMER_VENDOR_GEO_STATUS_OUTSIDE_DELIVERY_AREA CustomerVendorGeoStatus = 2
	// Lockdown events are being applied to both customer and vendor locations, this is to block vendors from receiving orders.
	// see https://product.deliveryhero.net/logistics-rider/documentation/event-actions-and-effects/ for detailed explanations.
	CustomerVendorGeoStatus_CUSTOMER_VENDOR_GEO_STATUS_VENDOR_UNDER_LOCKDOWN CustomerVendorGeoStatus = 3
	// Lockdown events are being applied to both customer and vendor locations, this is to block customers inside event zone from placing orders.
	CustomerVendorGeoStatus_CUSTOMER_VENDOR_GEO_STATUS_CUSTOMER_UNDER_LOCKDOWN CustomerVendorGeoStatus = 4
	// Shrinking events are being applied to customer locations but reduces the delivery areas of vendors for customers.
	CustomerVendorGeoStatus_CUSTOMER_VENDOR_GEO_STATUS_VENDOR_UNDER_SHRINKING CustomerVendorGeoStatus = 5
	// Close events are being applied to customer locations to block customers inside event zone from placing orders.
	CustomerVendorGeoStatus_CUSTOMER_VENDOR_GEO_STATUS_CLOSED_FOR_CUSTOMER CustomerVendorGeoStatus = 6
	CustomerVendorGeoStatus_CUSTOMER_VENDOR_GEO_STATUS_SKIPPED             CustomerVendorGeoStatus = 7
)

// Enum value maps for CustomerVendorGeoStatus.
var (
	CustomerVendorGeoStatus_name = map[int32]string{
		0: "CUSTOMER_VENDOR_GEO_STATUS_INVALID",
		1: "CUSTOMER_VENDOR_GEO_STATUS_AVAILABLE",
		2: "CUSTOMER_VENDOR_GEO_STATUS_OUTSIDE_DELIVERY_AREA",
		3: "CUSTOMER_VENDOR_GEO_STATUS_VENDOR_UNDER_LOCKDOWN",
		4: "CUSTOMER_VENDOR_GEO_STATUS_CUSTOMER_UNDER_LOCKDOWN",
		5: "CUSTOMER_VENDOR_GEO_STATUS_VENDOR_UNDER_SHRINKING",
		6: "CUSTOMER_VENDOR_GEO_STATUS_CLOSED_FOR_CUSTOMER",
		7: "CUSTOMER_VENDOR_GEO_STATUS_SKIPPED",
	}
	CustomerVendorGeoStatus_value = map[string]int32{
		"CUSTOMER_VENDOR_GEO_STATUS_INVALID":                 0,
		"CUSTOMER_VENDOR_GEO_STATUS_AVAILABLE":               1,
		"CUSTOMER_VENDOR_GEO_STATUS_OUTSIDE_DELIVERY_AREA":   2,
		"CUSTOMER_VENDOR_GEO_STATUS_VENDOR_UNDER_LOCKDOWN":   3,
		"CUSTOMER_VENDOR_GEO_STATUS_CUSTOMER_UNDER_LOCKDOWN": 4,
		"CUSTOMER_VENDOR_GEO_STATUS_VENDOR_UNDER_SHRINKING":  5,
		"CUSTOMER_VENDOR_GEO_STATUS_CLOSED_FOR_CUSTOMER":     6,
		"CUSTOMER_VENDOR_GEO_STATUS_SKIPPED":                 7,
	}
)

func (x CustomerVendorGeoStatus) Enum() *CustomerVendorGeoStatus {
	p := new(CustomerVendorGeoStatus)
	*p = x
	return p
}

func (x CustomerVendorGeoStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerVendorGeoStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_laas_v1_dto_proto_enumTypes[0].Descriptor()
}

func (CustomerVendorGeoStatus) Type() protoreflect.EnumType {
	return &file_laas_v1_dto_proto_enumTypes[0]
}

func (x CustomerVendorGeoStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerVendorGeoStatus.Descriptor instead.
func (CustomerVendorGeoStatus) EnumDescriptor() ([]byte, []int) {
	return file_laas_v1_dto_proto_rawDescGZIP(), []int{0}
}

// Supported vendor filtering options.
type VendorFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerType   v1.CustomerType         `protobuf:"varint,1,opt,name=customer_type,json=customerType,proto3,enum=domain.v1.CustomerType" json:"customer_type,omitempty"`
	VerticalParent *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=vertical_parent,json=verticalParent,proto3" json:"vertical_parent,omitempty"`
	// Primary vertical type of a vendor.
	VerticalType *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vertical_type,json=verticalType,proto3" json:"vertical_type,omitempty"`
	// A vendor is considered private if an Unavailability message with reason RESTRICTED_VISIBILITY is active for them (https://docs.api.thedatafridge.com/#tag/vendor-events/operation/VendorAvailability).
	ExcludePrivateVendors *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=exclude_private_vendors,json=excludePrivateVendors,proto3" json:"exclude_private_vendors,omitempty"`
	// A vendor is considered to have a schedule only if they have at least 1 regular or special day opening time range for delivery.
	ExcludeVendorsWithoutSchedule *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=exclude_vendors_without_schedule,json=excludeVendorsWithoutSchedule,proto3" json:"exclude_vendors_without_schedule,omitempty"`
	// If this parameter is true, the vendors which are currently closed, will only be returned if their allow_preorder property is true.
	ExcludeClosedNonPreorderVendors *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=exclude_closed_non_preorder_vendors,json=excludeClosedNonPreorderVendors,proto3" json:"exclude_closed_non_preorder_vendors,omitempty"`
	// All vertical types supported by the vendor.
	VerticalTypeIds []string `protobuf:"bytes,7,rep,name=vertical_type_ids,json=verticalTypeIds,proto3" json:"vertical_type_ids,omitempty"`
	// In default mode false only vendors that support one of platform_delivery, vendor_delivery, partner_delivery are listed, excluding "pickup only" vendors. Setting this value to true includes pickup-only vendors (use-case for LatAm).
	IncludePickupOnlyVendors *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=include_pickup_only_vendors,json=includePickupOnlyVendors,proto3" json:"include_pickup_only_vendors,omitempty"`
	ChainId                  *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EnableChainDeduplication *wrapperspb.BoolValue   `protobuf:"bytes,10,opt,name=enable_chain_deduplication,json=enableChainDeduplication,proto3" json:"enable_chain_deduplication,omitempty"`
	ExcludeVerticalTypes     []string                `protobuf:"bytes,11,rep,name=exclude_vertical_types,json=excludeVerticalTypes,proto3" json:"exclude_vertical_types,omitempty"`
}

func (x *VendorFilter) Reset() {
	*x = VendorFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laas_v1_dto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorFilter) ProtoMessage() {}

func (x *VendorFilter) ProtoReflect() protoreflect.Message {
	mi := &file_laas_v1_dto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorFilter.ProtoReflect.Descriptor instead.
func (*VendorFilter) Descriptor() ([]byte, []int) {
	return file_laas_v1_dto_proto_rawDescGZIP(), []int{0}
}

func (x *VendorFilter) GetCustomerType() v1.CustomerType {
	if x != nil {
		return x.CustomerType
	}
	return v1.CustomerType(0)
}

func (x *VendorFilter) GetVerticalParent() *wrapperspb.StringValue {
	if x != nil {
		return x.VerticalParent
	}
	return nil
}

func (x *VendorFilter) GetVerticalType() *wrapperspb.StringValue {
	if x != nil {
		return x.VerticalType
	}
	return nil
}

func (x *VendorFilter) GetExcludePrivateVendors() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExcludePrivateVendors
	}
	return nil
}

func (x *VendorFilter) GetExcludeVendorsWithoutSchedule() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExcludeVendorsWithoutSchedule
	}
	return nil
}

func (x *VendorFilter) GetExcludeClosedNonPreorderVendors() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExcludeClosedNonPreorderVendors
	}
	return nil
}

func (x *VendorFilter) GetVerticalTypeIds() []string {
	if x != nil {
		return x.VerticalTypeIds
	}
	return nil
}

func (x *VendorFilter) GetIncludePickupOnlyVendors() *wrapperspb.BoolValue {
	if x != nil {
		return x.IncludePickupOnlyVendors
	}
	return nil
}

func (x *VendorFilter) GetChainId() *wrapperspb.StringValue {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *VendorFilter) GetEnableChainDeduplication() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableChainDeduplication
	}
	return nil
}

func (x *VendorFilter) GetExcludeVerticalTypes() []string {
	if x != nil {
		return x.ExcludeVerticalTypes
	}
	return nil
}

// Aggregate information returned for a single vendor by LaaS API.
type Vendor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorId       string                  `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	ScheduleStatus VendorScheduleStatus    `protobuf:"varint,2,opt,name=schedule_status,json=scheduleStatus,proto3,enum=laas.v1.VendorScheduleStatus" json:"schedule_status,omitempty"`
	GeoStatus      CustomerVendorGeoStatus `protobuf:"varint,3,opt,name=geo_status,json=geoStatus,proto3,enum=laas.v1.CustomerVendorGeoStatus" json:"geo_status,omitempty"`
	OfflineStatus  OfflineStatus           `protobuf:"varint,4,opt,name=offline_status,json=offlineStatus,proto3,enum=laas.v1.OfflineStatus" json:"offline_status,omitempty"`
	// maps to OfflineReason in vendor-availability stream
	OfflineReason string `protobuf:"bytes,5,opt,name=offline_reason,json=offlineReason,proto3" json:"offline_reason,omitempty"`
	// Types that are assignable to DeliveryFee:
	//
	//	*Vendor_FallbackPricingResponse
	//	*Vendor_DpsResponse
	DeliveryFee isVendor_DeliveryFee `protobuf_oneof:"delivery_fee"`
	// Types that are assignable to DeliveryTimeEstimate:
	//
	//	*Vendor_FallbackTimeEstimateResponse
	//	*Vendor_TesResponse
	DeliveryTimeEstimate       isVendor_DeliveryTimeEstimate `protobuf_oneof:"delivery_time_estimate"`
	AppliedDeliveryAreaEventId *wrapperspb.StringValue       `protobuf:"bytes,10,opt,name=applied_delivery_area_event_id,json=appliedDeliveryAreaEventId,proto3" json:"applied_delivery_area_event_id,omitempty"`
	// If the vendor is currently closed and becomes available according the vendor-schedule and vendor-availability streams within the next 4 days,
	// this field returns that absolute point in time, stating the vendor's UTC offset as per RFC-3339.
	AvailableAtInVendorLocalTime *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=available_at_in_vendor_local_time,json=availableAtInVendorLocalTime,proto3" json:"available_at_in_vendor_local_time,omitempty"`
	// If the vendor is currently open and closes or becomes unavailable according the vendor-schedule and vendor-availability streams within the next 4 days,
	// this field returns that absolute point in time, stating the vendor's UTC offset as per RFC-3339.
	ClosedAtInVendorLocalTime *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=closed_at_in_vendor_local_time,json=closedAtInVendorLocalTime,proto3" json:"closed_at_in_vendor_local_time,omitempty"`
	// Vendor distance in meter to the customer.
	DistanceMeters *wrapperspb.Int32Value `protobuf:"bytes,13,opt,name=distance_meters,json=distanceMeters,proto3" json:"distance_meters,omitempty"`
}

func (x *Vendor) Reset() {
	*x = Vendor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laas_v1_dto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vendor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vendor) ProtoMessage() {}

func (x *Vendor) ProtoReflect() protoreflect.Message {
	mi := &file_laas_v1_dto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vendor.ProtoReflect.Descriptor instead.
func (*Vendor) Descriptor() ([]byte, []int) {
	return file_laas_v1_dto_proto_rawDescGZIP(), []int{1}
}

func (x *Vendor) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Vendor) GetScheduleStatus() VendorScheduleStatus {
	if x != nil {
		return x.ScheduleStatus
	}
	return VendorScheduleStatus_VENDOR_SCHEDULE_STATUS_INVALID
}

func (x *Vendor) GetGeoStatus() CustomerVendorGeoStatus {
	if x != nil {
		return x.GeoStatus
	}
	return CustomerVendorGeoStatus_CUSTOMER_VENDOR_GEO_STATUS_INVALID
}

func (x *Vendor) GetOfflineStatus() OfflineStatus {
	if x != nil {
		return x.OfflineStatus
	}
	return OfflineStatus_OFFLINE_STATUS_INVALID
}

func (x *Vendor) GetOfflineReason() string {
	if x != nil {
		return x.OfflineReason
	}
	return ""
}

func (m *Vendor) GetDeliveryFee() isVendor_DeliveryFee {
	if m != nil {
		return m.DeliveryFee
	}
	return nil
}

func (x *Vendor) GetFallbackPricingResponse() *FallbackPricingResponse {
	if x, ok := x.GetDeliveryFee().(*Vendor_FallbackPricingResponse); ok {
		return x.FallbackPricingResponse
	}
	return nil
}

func (x *Vendor) GetDpsResponse() *v11.GetSingleVendorFeeResponse {
	if x, ok := x.GetDeliveryFee().(*Vendor_DpsResponse); ok {
		return x.DpsResponse
	}
	return nil
}

func (m *Vendor) GetDeliveryTimeEstimate() isVendor_DeliveryTimeEstimate {
	if m != nil {
		return m.DeliveryTimeEstimate
	}
	return nil
}

func (x *Vendor) GetFallbackTimeEstimateResponse() *FallbackTimeEstimateResponse {
	if x, ok := x.GetDeliveryTimeEstimate().(*Vendor_FallbackTimeEstimateResponse); ok {
		return x.FallbackTimeEstimateResponse
	}
	return nil
}

func (x *Vendor) GetTesResponse() *v12.SingleVendorEstimationResponse {
	if x, ok := x.GetDeliveryTimeEstimate().(*Vendor_TesResponse); ok {
		return x.TesResponse
	}
	return nil
}

func (x *Vendor) GetAppliedDeliveryAreaEventId() *wrapperspb.StringValue {
	if x != nil {
		return x.AppliedDeliveryAreaEventId
	}
	return nil
}

func (x *Vendor) GetAvailableAtInVendorLocalTime() *wrapperspb.StringValue {
	if x != nil {
		return x.AvailableAtInVendorLocalTime
	}
	return nil
}

func (x *Vendor) GetClosedAtInVendorLocalTime() *wrapperspb.StringValue {
	if x != nil {
		return x.ClosedAtInVendorLocalTime
	}
	return nil
}

func (x *Vendor) GetDistanceMeters() *wrapperspb.Int32Value {
	if x != nil {
		return x.DistanceMeters
	}
	return nil
}

type isVendor_DeliveryFee interface {
	isVendor_DeliveryFee()
}

type Vendor_FallbackPricingResponse struct {
	FallbackPricingResponse *FallbackPricingResponse `protobuf:"bytes,6,opt,name=fallback_pricing_response,json=fallbackPricingResponse,proto3,oneof"`
}

type Vendor_DpsResponse struct {
	DpsResponse *v11.GetSingleVendorFeeResponse `protobuf:"bytes,7,opt,name=dps_response,json=dpsResponse,proto3,oneof"`
}

func (*Vendor_FallbackPricingResponse) isVendor_DeliveryFee() {}

func (*Vendor_DpsResponse) isVendor_DeliveryFee() {}

type isVendor_DeliveryTimeEstimate interface {
	isVendor_DeliveryTimeEstimate()
}

type Vendor_FallbackTimeEstimateResponse struct {
	FallbackTimeEstimateResponse *FallbackTimeEstimateResponse `protobuf:"bytes,8,opt,name=fallback_time_estimate_response,json=fallbackTimeEstimateResponse,proto3,oneof"`
}

type Vendor_TesResponse struct {
	TesResponse *v12.SingleVendorEstimationResponse `protobuf:"bytes,9,opt,name=tes_response,json=tesResponse,proto3,oneof"`
}

func (*Vendor_FallbackTimeEstimateResponse) isVendor_DeliveryTimeEstimate() {}

func (*Vendor_TesResponse) isVendor_DeliveryTimeEstimate() {}

// Delivery-area event information.
type DeliveryAreaEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventAction EventAction         `protobuf:"varint,2,opt,name=event_action,json=eventAction,proto3,enum=laas.v1.EventAction" json:"event_action,omitempty"`
	Messages    []*LocalizedMessage `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	// Temporary added because of https://jira.deliveryhero.com/browse/LAAS-906
	ActionValue *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=action_value,json=actionValue,proto3" json:"action_value,omitempty"`
}

func (x *DeliveryAreaEvent) Reset() {
	*x = DeliveryAreaEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laas_v1_dto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryAreaEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryAreaEvent) ProtoMessage() {}

func (x *DeliveryAreaEvent) ProtoReflect() protoreflect.Message {
	mi := &file_laas_v1_dto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryAreaEvent.ProtoReflect.Descriptor instead.
func (*DeliveryAreaEvent) Descriptor() ([]byte, []int) {
	return file_laas_v1_dto_proto_rawDescGZIP(), []int{2}
}

func (x *DeliveryAreaEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeliveryAreaEvent) GetEventAction() EventAction {
	if x != nil {
		return x.EventAction
	}
	return EventAction_EVENT_ACTION_INVALID
}

func (x *DeliveryAreaEvent) GetMessages() []*LocalizedMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *DeliveryAreaEvent) GetActionValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ActionValue
	}
	return nil
}

var File_laas_v1_dto_proto protoreflect.FileDescriptor

var file_laas_v1_dto_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6c, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x61, 0x61, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x74, 0x69, 0x6d, 0x65, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x80, 0x07, 0x0a, 0x0c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e,
	0x0a, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x4a,
	0x0a, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x12, 0x63,
	0x0a, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x23, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a,
	0x11, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06,
	0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x59, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x16, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c,
	0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x14, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0xaa, 0x08, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47,
	0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x19, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x17, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x64, 0x70, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x1f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52,
	0x1c, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0c, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65, 0x61,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x21, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x49, 0x6e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5f,
	0x0a, 0x1e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x49, 0x6e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x22,
	0xd4, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x72, 0x65, 0x61,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6c, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0xa2, 0x03, 0x0a, 0x17, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x56,
	0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x47, 0x45,
	0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x34, 0x0a, 0x30, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52,
	0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x47, 0x45,
	0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03,
	0x12, 0x36, 0x0a, 0x32, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x4e,
	0x44, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4f, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x52, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x32, 0x0a, 0x2e, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x4e, 0x44,
	0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x42, 0x6d, 0x0a, 0x2b, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x68, 0x65, 0x72, 0x6f, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x6c, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x44, 0x74, 0x6f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x68, 0x65, 0x72, 0x6f, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2f, 0x6c, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_laas_v1_dto_proto_rawDescOnce sync.Once
	file_laas_v1_dto_proto_rawDescData = file_laas_v1_dto_proto_rawDesc
)

func file_laas_v1_dto_proto_rawDescGZIP() []byte {
	file_laas_v1_dto_proto_rawDescOnce.Do(func() {
		file_laas_v1_dto_proto_rawDescData = protoimpl.X.CompressGZIP(file_laas_v1_dto_proto_rawDescData)
	})
	return file_laas_v1_dto_proto_rawDescData
}

var file_laas_v1_dto_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_laas_v1_dto_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_laas_v1_dto_proto_goTypes = []interface{}{
	(CustomerVendorGeoStatus)(0),               // 0: laas.v1.CustomerVendorGeoStatus
	(*VendorFilter)(nil),                       // 1: laas.v1.VendorFilter
	(*Vendor)(nil),                             // 2: laas.v1.Vendor
	(*DeliveryAreaEvent)(nil),                  // 3: laas.v1.DeliveryAreaEvent
	(v1.CustomerType)(0),                       // 4: domain.v1.CustomerType
	(*wrapperspb.StringValue)(nil),             // 5: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),               // 6: google.protobuf.BoolValue
	(VendorScheduleStatus)(0),                  // 7: laas.v1.VendorScheduleStatus
	(OfflineStatus)(0),                         // 8: laas.v1.OfflineStatus
	(*FallbackPricingResponse)(nil),            // 9: laas.v1.FallbackPricingResponse
	(*v11.GetSingleVendorFeeResponse)(nil),     // 10: dynamicpricing.v1.GetSingleVendorFeeResponse
	(*FallbackTimeEstimateResponse)(nil),       // 11: laas.v1.FallbackTimeEstimateResponse
	(*v12.SingleVendorEstimationResponse)(nil), // 12: timeestimation.v1.SingleVendorEstimationResponse
	(*wrapperspb.Int32Value)(nil),              // 13: google.protobuf.Int32Value
	(EventAction)(0),                           // 14: laas.v1.EventAction
	(*LocalizedMessage)(nil),                   // 15: laas.v1.LocalizedMessage
	(*wrapperspb.DoubleValue)(nil),             // 16: google.protobuf.DoubleValue
}
var file_laas_v1_dto_proto_depIdxs = []int32{
	4,  // 0: laas.v1.VendorFilter.customer_type:type_name -> domain.v1.CustomerType
	5,  // 1: laas.v1.VendorFilter.vertical_parent:type_name -> google.protobuf.StringValue
	5,  // 2: laas.v1.VendorFilter.vertical_type:type_name -> google.protobuf.StringValue
	6,  // 3: laas.v1.VendorFilter.exclude_private_vendors:type_name -> google.protobuf.BoolValue
	6,  // 4: laas.v1.VendorFilter.exclude_vendors_without_schedule:type_name -> google.protobuf.BoolValue
	6,  // 5: laas.v1.VendorFilter.exclude_closed_non_preorder_vendors:type_name -> google.protobuf.BoolValue
	6,  // 6: laas.v1.VendorFilter.include_pickup_only_vendors:type_name -> google.protobuf.BoolValue
	5,  // 7: laas.v1.VendorFilter.chain_id:type_name -> google.protobuf.StringValue
	6,  // 8: laas.v1.VendorFilter.enable_chain_deduplication:type_name -> google.protobuf.BoolValue
	7,  // 9: laas.v1.Vendor.schedule_status:type_name -> laas.v1.VendorScheduleStatus
	0,  // 10: laas.v1.Vendor.geo_status:type_name -> laas.v1.CustomerVendorGeoStatus
	8,  // 11: laas.v1.Vendor.offline_status:type_name -> laas.v1.OfflineStatus
	9,  // 12: laas.v1.Vendor.fallback_pricing_response:type_name -> laas.v1.FallbackPricingResponse
	10, // 13: laas.v1.Vendor.dps_response:type_name -> dynamicpricing.v1.GetSingleVendorFeeResponse
	11, // 14: laas.v1.Vendor.fallback_time_estimate_response:type_name -> laas.v1.FallbackTimeEstimateResponse
	12, // 15: laas.v1.Vendor.tes_response:type_name -> timeestimation.v1.SingleVendorEstimationResponse
	5,  // 16: laas.v1.Vendor.applied_delivery_area_event_id:type_name -> google.protobuf.StringValue
	5,  // 17: laas.v1.Vendor.available_at_in_vendor_local_time:type_name -> google.protobuf.StringValue
	5,  // 18: laas.v1.Vendor.closed_at_in_vendor_local_time:type_name -> google.protobuf.StringValue
	13, // 19: laas.v1.Vendor.distance_meters:type_name -> google.protobuf.Int32Value
	14, // 20: laas.v1.DeliveryAreaEvent.event_action:type_name -> laas.v1.EventAction
	15, // 21: laas.v1.DeliveryAreaEvent.messages:type_name -> laas.v1.LocalizedMessage
	16, // 22: laas.v1.DeliveryAreaEvent.action_value:type_name -> google.protobuf.DoubleValue
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_laas_v1_dto_proto_init() }
func file_laas_v1_dto_proto_init() {
	if File_laas_v1_dto_proto != nil {
		return
	}
	file_laas_v1_domain_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_laas_v1_dto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laas_v1_dto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vendor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laas_v1_dto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryAreaEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_laas_v1_dto_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Vendor_FallbackPricingResponse)(nil),
		(*Vendor_DpsResponse)(nil),
		(*Vendor_FallbackTimeEstimateResponse)(nil),
		(*Vendor_TesResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_laas_v1_dto_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_laas_v1_dto_proto_goTypes,
		DependencyIndexes: file_laas_v1_dto_proto_depIdxs,
		EnumInfos:         file_laas_v1_dto_proto_enumTypes,
		MessageInfos:      file_laas_v1_dto_proto_msgTypes,
	}.Build()
	File_laas_v1_dto_proto = out.File
	file_laas_v1_dto_proto_rawDesc = nil
	file_laas_v1_dto_proto_goTypes = nil
	file_laas_v1_dto_proto_depIdxs = nil
}
