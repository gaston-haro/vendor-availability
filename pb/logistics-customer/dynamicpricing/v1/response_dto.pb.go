// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: dynamicpricing/v1/response_dto.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible types for the minimum delivery fee.
type MinimumDeliveryFeeType int32

const (
	MinimumDeliveryFeeType_MINIMUM_DELIVERY_FEE_TYPE_INVALID       MinimumDeliveryFeeType = 0
	MinimumDeliveryFeeType_MINIMUM_DELIVERY_FEE_TYPE_FREE_DELIVERY MinimumDeliveryFeeType = 1
	MinimumDeliveryFeeType_MINIMUM_DELIVERY_FEE_TYPE_BEST_DEAL     MinimumDeliveryFeeType = 2
)

// Enum value maps for MinimumDeliveryFeeType.
var (
	MinimumDeliveryFeeType_name = map[int32]string{
		0: "MINIMUM_DELIVERY_FEE_TYPE_INVALID",
		1: "MINIMUM_DELIVERY_FEE_TYPE_FREE_DELIVERY",
		2: "MINIMUM_DELIVERY_FEE_TYPE_BEST_DEAL",
	}
	MinimumDeliveryFeeType_value = map[string]int32{
		"MINIMUM_DELIVERY_FEE_TYPE_INVALID":       0,
		"MINIMUM_DELIVERY_FEE_TYPE_FREE_DELIVERY": 1,
		"MINIMUM_DELIVERY_FEE_TYPE_BEST_DEAL":     2,
	}
)

func (x MinimumDeliveryFeeType) Enum() *MinimumDeliveryFeeType {
	p := new(MinimumDeliveryFeeType)
	*p = x
	return p
}

func (x MinimumDeliveryFeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinimumDeliveryFeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_dynamicpricing_v1_response_dto_proto_enumTypes[0].Descriptor()
}

func (MinimumDeliveryFeeType) Type() protoreflect.EnumType {
	return &file_dynamicpricing_v1_response_dto_proto_enumTypes[0]
}

func (x MinimumDeliveryFeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinimumDeliveryFeeType.Descriptor instead.
func (MinimumDeliveryFeeType) EnumDescriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{0}
}

// Possible types for the service fee.
type ServiceFeeType int32

const (
	ServiceFeeType_SERVICE_FEE_TYPE_INVALID    ServiceFeeType = 0
	ServiceFeeType_SERVICE_FEE_TYPE_ABSOLUTE   ServiceFeeType = 1
	ServiceFeeType_SERVICE_FEE_TYPE_PERCENTAGE ServiceFeeType = 2
)

// Enum value maps for ServiceFeeType.
var (
	ServiceFeeType_name = map[int32]string{
		0: "SERVICE_FEE_TYPE_INVALID",
		1: "SERVICE_FEE_TYPE_ABSOLUTE",
		2: "SERVICE_FEE_TYPE_PERCENTAGE",
	}
	ServiceFeeType_value = map[string]int32{
		"SERVICE_FEE_TYPE_INVALID":    0,
		"SERVICE_FEE_TYPE_ABSOLUTE":   1,
		"SERVICE_FEE_TYPE_PERCENTAGE": 2,
	}
)

func (x ServiceFeeType) Enum() *ServiceFeeType {
	p := new(ServiceFeeType)
	*p = x
	return p
}

func (x ServiceFeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceFeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_dynamicpricing_v1_response_dto_proto_enumTypes[1].Descriptor()
}

func (ServiceFeeType) Type() protoreflect.EnumType {
	return &file_dynamicpricing_v1_response_dto_proto_enumTypes[1]
}

func (x ServiceFeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceFeeType.Descriptor instead.
func (ServiceFeeType) EnumDescriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{1}
}

// Possible types for the fee reason.
type FeeReasonType int32

const (
	FeeReasonType_FEE_REASON_TYPE_INVALID      FeeReasonType = 0
	FeeReasonType_FEE_REASON_TYPE_NEW_CUSTOMER FeeReasonType = 1
	FeeReasonType_FEE_REASON_TYPE_SUBSCRIBER   FeeReasonType = 2
)

// Enum value maps for FeeReasonType.
var (
	FeeReasonType_name = map[int32]string{
		0: "FEE_REASON_TYPE_INVALID",
		1: "FEE_REASON_TYPE_NEW_CUSTOMER",
		2: "FEE_REASON_TYPE_SUBSCRIBER",
	}
	FeeReasonType_value = map[string]int32{
		"FEE_REASON_TYPE_INVALID":      0,
		"FEE_REASON_TYPE_NEW_CUSTOMER": 1,
		"FEE_REASON_TYPE_SUBSCRIBER":   2,
	}
)

func (x FeeReasonType) Enum() *FeeReasonType {
	p := new(FeeReasonType)
	*p = x
	return p
}

func (x FeeReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_dynamicpricing_v1_response_dto_proto_enumTypes[2].Descriptor()
}

func (FeeReasonType) Type() protoreflect.EnumType {
	return &file_dynamicpricing_v1_response_dto_proto_enumTypes[2]
}

func (x FeeReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeReasonType.Descriptor instead.
func (FeeReasonType) EnumDescriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{2}
}

type PriorityFeeType int32

const (
	PriorityFeeType_PRIORITY_FEE_TYPE_INVALID   PriorityFeeType = 0
	PriorityFeeType_PRIORITY_FEE_TYPE_SURCHARGE PriorityFeeType = 1
)

// Enum value maps for PriorityFeeType.
var (
	PriorityFeeType_name = map[int32]string{
		0: "PRIORITY_FEE_TYPE_INVALID",
		1: "PRIORITY_FEE_TYPE_SURCHARGE",
	}
	PriorityFeeType_value = map[string]int32{
		"PRIORITY_FEE_TYPE_INVALID":   0,
		"PRIORITY_FEE_TYPE_SURCHARGE": 1,
	}
)

func (x PriorityFeeType) Enum() *PriorityFeeType {
	p := new(PriorityFeeType)
	*p = x
	return p
}

func (x PriorityFeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriorityFeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_dynamicpricing_v1_response_dto_proto_enumTypes[3].Descriptor()
}

func (PriorityFeeType) Type() protoreflect.EnumType {
	return &file_dynamicpricing_v1_response_dto_proto_enumTypes[3]
}

func (x PriorityFeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriorityFeeType.Descriptor instead.
func (PriorityFeeType) EnumDescriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{3}
}

// Fee information for a vendor. Check https://apidocs.usehurrier.com/logistics-dynamic-pricing.html#delivery-fee-v2-get-single-fee-v2-post for more details
type VendorFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorId string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	// Currency code expressed as ISO-4217 alpha representation
	// https://en.wikipedia.org/wiki/ISO_4217
	Currency    string       `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	DeliveryFee *DeliveryFee `protobuf:"bytes,3,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	// Minimum order value so the order is accepted by the vendor.
	MinimumOrderValue *MinimumOrderValue `protobuf:"bytes,4,opt,name=minimum_order_value,json=minimumOrderValue,proto3" json:"minimum_order_value,omitempty"`
	// Service Fee as per the order.
	ServiceFee  *ServiceFee    `protobuf:"bytes,5,opt,name=service_fee,json=serviceFee,proto3" json:"service_fee,omitempty"`
	FeeReason   []*FeeReason   `protobuf:"bytes,6,rep,name=fee_reason,json=feeReason,proto3" json:"fee_reason,omitempty"`
	Metadata    *MetaData      `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PriorityFee []*PriorityFee `protobuf:"bytes,8,rep,name=priority_fee,json=priorityFee,proto3" json:"priority_fee,omitempty"`
}

func (x *VendorFee) Reset() {
	*x = VendorFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorFee) ProtoMessage() {}

func (x *VendorFee) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorFee.ProtoReflect.Descriptor instead.
func (*VendorFee) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{0}
}

func (x *VendorFee) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *VendorFee) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *VendorFee) GetDeliveryFee() *DeliveryFee {
	if x != nil {
		return x.DeliveryFee
	}
	return nil
}

func (x *VendorFee) GetMinimumOrderValue() *MinimumOrderValue {
	if x != nil {
		return x.MinimumOrderValue
	}
	return nil
}

func (x *VendorFee) GetServiceFee() *ServiceFee {
	if x != nil {
		return x.ServiceFee
	}
	return nil
}

func (x *VendorFee) GetFeeReason() []*FeeReason {
	if x != nil {
		return x.FeeReason
	}
	return nil
}

func (x *VendorFee) GetMetadata() *MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VendorFee) GetPriorityFee() []*PriorityFee {
	if x != nil {
		return x.PriorityFee
	}
	return nil
}

// Breakdown of the delivery fee.
type DeliveryFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual total delivery fee.
	Total              float64             `protobuf:"fixed64,1,opt,name=total,proto3" json:"total,omitempty"`
	TravelTime         float64             `protobuf:"fixed64,2,opt,name=travel_time,json=travelTime,proto3" json:"travel_time,omitempty"`
	FleetUtilization   float64             `protobuf:"fixed64,3,opt,name=fleet_utilization,json=fleetUtilization,proto3" json:"fleet_utilization,omitempty"`
	BasketValueFee     *BasketValueFee     `protobuf:"bytes,4,opt,name=basket_value_fee,json=basketValueFee,proto3" json:"basket_value_fee,omitempty"`
	MinimumDeliveryFee *MinimumDeliveryFee `protobuf:"bytes,5,opt,name=minimum_delivery_fee,json=minimumDeliveryFee,proto3" json:"minimum_delivery_fee,omitempty"`
	// Contains the ‘total’ delivery fee based on the unconditional “fallback” condition of an assignment, and only considers the base component configuration.
	// Present only if the actual delivery fee is based on a conditional setup and is lower than the standard fee.
	StandardFee *StandardFee `protobuf:"bytes,6,opt,name=standard_fee,json=standardFee,proto3" json:"standard_fee,omitempty"`
}

func (x *DeliveryFee) Reset() {
	*x = DeliveryFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryFee) ProtoMessage() {}

func (x *DeliveryFee) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryFee.ProtoReflect.Descriptor instead.
func (*DeliveryFee) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{1}
}

func (x *DeliveryFee) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeliveryFee) GetTravelTime() float64 {
	if x != nil {
		return x.TravelTime
	}
	return 0
}

func (x *DeliveryFee) GetFleetUtilization() float64 {
	if x != nil {
		return x.FleetUtilization
	}
	return 0
}

func (x *DeliveryFee) GetBasketValueFee() *BasketValueFee {
	if x != nil {
		return x.BasketValueFee
	}
	return nil
}

func (x *DeliveryFee) GetMinimumDeliveryFee() *MinimumDeliveryFee {
	if x != nil {
		return x.MinimumDeliveryFee
	}
	return nil
}

func (x *DeliveryFee) GetStandardFee() *StandardFee {
	if x != nil {
		return x.StandardFee
	}
	return nil
}

// Information about the basket value fee component.
type BasketValueFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The delivery fee value users have to pay at the current value of their basket (can be used to show how much customers "saved")
	CurrentFeeValue float64 `protobuf:"fixed64,1,opt,name=current_fee_value,json=currentFeeValue,proto3" json:"current_fee_value,omitempty"`
	// The delivery fee value users have to pay at the next higher basket value they can reach.
	NextFeeValue *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=next_fee_value,json=nextFeeValue,proto3" json:"next_fee_value,omitempty"`
	// The basket value which users on client-side have to reach to have the next lower fee value applied.
	NextThreshold *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=next_threshold,json=nextThreshold,proto3" json:"next_threshold,omitempty"`
	// The difference off current basket value and basket value that users need to reach to have a lower delivery applied (i. e. the additional value users need to add to the basket).
	DifferenceThreshold *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=difference_threshold,json=differenceThreshold,proto3" json:"difference_threshold,omitempty"`
}

func (x *BasketValueFee) Reset() {
	*x = BasketValueFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasketValueFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasketValueFee) ProtoMessage() {}

func (x *BasketValueFee) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasketValueFee.ProtoReflect.Descriptor instead.
func (*BasketValueFee) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{2}
}

func (x *BasketValueFee) GetCurrentFeeValue() float64 {
	if x != nil {
		return x.CurrentFeeValue
	}
	return 0
}

func (x *BasketValueFee) GetNextFeeValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.NextFeeValue
	}
	return nil
}

func (x *BasketValueFee) GetNextThreshold() *wrapperspb.DoubleValue {
	if x != nil {
		return x.NextThreshold
	}
	return nil
}

func (x *BasketValueFee) GetDifferenceThreshold() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DifferenceThreshold
	}
	return nil
}

// Information about the minimum delivery fee component.
type MinimumDeliveryFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type MinimumDeliveryFeeType `protobuf:"varint,1,opt,name=type,proto3,enum=dynamicpricing.v1.MinimumDeliveryFeeType" json:"type,omitempty"`
	// Its the order value that needs to be reached for the lowest possible delivery fee.
	BasketValueThreshold *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=basket_value_threshold,json=basketValueThreshold,proto3" json:"basket_value_threshold,omitempty"`
	// The value of the lowest possible delivery fee (present only if the type is best_deal).
	DeliveryFeeTotal *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=delivery_fee_total,json=deliveryFeeTotal,proto3" json:"delivery_fee_total,omitempty"`
	// The value of the highest possible discount (present only if the type is best_deal).
	Discount *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *MinimumDeliveryFee) Reset() {
	*x = MinimumDeliveryFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinimumDeliveryFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinimumDeliveryFee) ProtoMessage() {}

func (x *MinimumDeliveryFee) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinimumDeliveryFee.ProtoReflect.Descriptor instead.
func (*MinimumDeliveryFee) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{3}
}

func (x *MinimumDeliveryFee) GetType() MinimumDeliveryFeeType {
	if x != nil {
		return x.Type
	}
	return MinimumDeliveryFeeType_MINIMUM_DELIVERY_FEE_TYPE_INVALID
}

func (x *MinimumDeliveryFee) GetBasketValueThreshold() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BasketValueThreshold
	}
	return nil
}

func (x *MinimumDeliveryFee) GetDeliveryFeeTotal() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DeliveryFeeTotal
	}
	return nil
}

func (x *MinimumDeliveryFee) GetDiscount() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Discount
	}
	return nil
}

// Information about the standard fee component.
type StandardFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total float64 `protobuf:"fixed64,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *StandardFee) Reset() {
	*x = StandardFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardFee) ProtoMessage() {}

func (x *StandardFee) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardFee.ProtoReflect.Descriptor instead.
func (*StandardFee) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{4}
}

func (x *StandardFee) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Minimum order value so the order is accepted by the vendor.
type MinimumOrderValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total minimum order value, it is based on the travel time in case the component has flat MOV or travel time MOV only, it is based on the fleet delay otherwise.
	Total float64 `protobuf:"fixed64,1,opt,name=total,proto3" json:"total,omitempty"`
	// The minimum order value based on the travel time.
	TravelTime float64 `protobuf:"fixed64,2,opt,name=travel_time,json=travelTime,proto3" json:"travel_time,omitempty"`
	// The difference between the total and the travel_time
	FleetUtilization float64 `protobuf:"fixed64,3,opt,name=fleet_utilization,json=fleetUtilization,proto3" json:"fleet_utilization,omitempty"`
	// small order fee limit information
	SmallOrderFee *SmallOrderFee `protobuf:"bytes,4,opt,name=small_order_fee,json=smallOrderFee,proto3" json:"small_order_fee,omitempty"`
}

func (x *MinimumOrderValue) Reset() {
	*x = MinimumOrderValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinimumOrderValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinimumOrderValue) ProtoMessage() {}

func (x *MinimumOrderValue) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinimumOrderValue.ProtoReflect.Descriptor instead.
func (*MinimumOrderValue) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{5}
}

func (x *MinimumOrderValue) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MinimumOrderValue) GetTravelTime() float64 {
	if x != nil {
		return x.TravelTime
	}
	return 0
}

func (x *MinimumOrderValue) GetFleetUtilization() float64 {
	if x != nil {
		return x.FleetUtilization
	}
	return 0
}

func (x *MinimumOrderValue) GetSmallOrderFee() *SmallOrderFee {
	if x != nil {
		return x.SmallOrderFee
	}
	return nil
}

// Small order fee limit information.
type SmallOrderFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hard minimum order value limit.
	HardLimit float64 `protobuf:"fixed64,1,opt,name=hard_limit,json=hardLimit,proto3" json:"hard_limit,omitempty"`
	// The soft minimum order value limit.
	SoftLimit float64 `protobuf:"fixed64,2,opt,name=soft_limit,json=softLimit,proto3" json:"soft_limit,omitempty"`
	// The maximum possible small order fee surcharge.
	SmallOrderFeeCap float64 `protobuf:"fixed64,3,opt,name=small_order_fee_cap,json=smallOrderFeeCap,proto3" json:"small_order_fee_cap,omitempty"`
	// The small order fee value.
	SmallOrderFee float64 `protobuf:"fixed64,4,opt,name=small_order_fee,json=smallOrderFee,proto3" json:"small_order_fee,omitempty"`
}

func (x *SmallOrderFee) Reset() {
	*x = SmallOrderFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallOrderFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallOrderFee) ProtoMessage() {}

func (x *SmallOrderFee) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallOrderFee.ProtoReflect.Descriptor instead.
func (*SmallOrderFee) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{6}
}

func (x *SmallOrderFee) GetHardLimit() float64 {
	if x != nil {
		return x.HardLimit
	}
	return 0
}

func (x *SmallOrderFee) GetSoftLimit() float64 {
	if x != nil {
		return x.SoftLimit
	}
	return 0
}

func (x *SmallOrderFee) GetSmallOrderFeeCap() float64 {
	if x != nil {
		return x.SmallOrderFeeCap
	}
	return 0
}

func (x *SmallOrderFee) GetSmallOrderFee() float64 {
	if x != nil {
		return x.SmallOrderFee
	}
	return 0
}

// Service Fee as per the order.
type ServiceFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A fee for diverse services that customers are charged instead or on top of delivery fee
	Total float64 `protobuf:"fixed64,1,opt,name=total,proto3" json:"total,omitempty"`
	// Service fee value that total ServiceFee is calculated based on it
	SetupValue float64 `protobuf:"fixed64,2,opt,name=setup_value,json=setupValue,proto3" json:"setup_value,omitempty"`
	// Service fee type that total ServiceFee is calculated based on it
	Type     ServiceFeeType `protobuf:"varint,3,opt,name=type,proto3,enum=dynamicpricing.v1.ServiceFeeType" json:"type,omitempty"`
	MinValue float64        `protobuf:"fixed64,4,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue float64        `protobuf:"fixed64,5,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (x *ServiceFee) Reset() {
	*x = ServiceFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceFee) ProtoMessage() {}

func (x *ServiceFee) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceFee.ProtoReflect.Descriptor instead.
func (*ServiceFee) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceFee) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ServiceFee) GetSetupValue() float64 {
	if x != nil {
		return x.SetupValue
	}
	return 0
}

func (x *ServiceFee) GetType() ServiceFeeType {
	if x != nil {
		return x.Type
	}
	return ServiceFeeType_SERVICE_FEE_TYPE_INVALID
}

func (x *ServiceFee) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *ServiceFee) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

// Possible reasons for the fee.
type FeeReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeReasonType FeeReasonType `protobuf:"varint,1,opt,name=fee_reason_type,json=feeReasonType,proto3,enum=dynamicpricing.v1.FeeReasonType" json:"fee_reason_type,omitempty"`
	ReasonApplied bool          `protobuf:"varint,2,opt,name=reason_applied,json=reasonApplied,proto3" json:"reason_applied,omitempty"`
}

func (x *FeeReason) Reset() {
	*x = FeeReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeReason) ProtoMessage() {}

func (x *FeeReason) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeReason.ProtoReflect.Descriptor instead.
func (*FeeReason) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{8}
}

func (x *FeeReason) GetFeeReasonType() FeeReasonType {
	if x != nil {
		return x.FeeReasonType
	}
	return FeeReasonType_FEE_REASON_TYPE_INVALID
}

func (x *FeeReason) GetReasonApplied() bool {
	if x != nil {
		return x.ReasonApplied
	}
	return false
}

// Information about the customer.
type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{9}
}

func (x *Customer) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Contains information about which scheme is used to calculate the delivery fee.
type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorGroupId         int64  `protobuf:"varint,1,opt,name=vendor_group_id,json=vendorGroupId,proto3" json:"vendor_group_id,omitempty"`
	SchemeId              int64  `protobuf:"varint,2,opt,name=scheme_id,json=schemeId,proto3" json:"scheme_id,omitempty"`
	VendorPriceSchemeType string `protobuf:"bytes,3,opt,name=vendor_price_scheme_type,json=vendorPriceSchemeType,proto3" json:"vendor_price_scheme_type,omitempty"`
	// pricing:automatic-assignment:<vendor_group_price_config_id> for ASA with new customer condition.
	IncentiveId string `protobuf:"bytes,4,opt,name=incentive_id,json=incentiveId,proto3" json:"incentive_id,omitempty"`
	// In case the delivery fee is subject to an incentive, the difference between the current total delivery fee minus.
	// the original total delivery fee ignoring the incentive(s) and including all price components.
	// A negative value represents an actual discount, and it will be null if there is no incentive.
	IncentiveDiscount float64 `protobuf:"fixed64,5,opt,name=incentive_discount,json=incentiveDiscount,proto3" json:"incentive_discount,omitempty"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{10}
}

func (x *MetaData) GetVendorGroupId() int64 {
	if x != nil {
		return x.VendorGroupId
	}
	return 0
}

func (x *MetaData) GetSchemeId() int64 {
	if x != nil {
		return x.SchemeId
	}
	return 0
}

func (x *MetaData) GetVendorPriceSchemeType() string {
	if x != nil {
		return x.VendorPriceSchemeType
	}
	return ""
}

func (x *MetaData) GetIncentiveId() string {
	if x != nil {
		return x.IncentiveId
	}
	return ""
}

func (x *MetaData) GetIncentiveDiscount() float64 {
	if x != nil {
		return x.IncentiveDiscount
	}
	return 0
}

type PriorityFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64         `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  PriorityFeeType `protobuf:"varint,2,opt,name=type,proto3,enum=dynamicpricing.v1.PriorityFeeType" json:"type,omitempty"`
}

func (x *PriorityFee) Reset() {
	*x = PriorityFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityFee) ProtoMessage() {}

func (x *PriorityFee) ProtoReflect() protoreflect.Message {
	mi := &file_dynamicpricing_v1_response_dto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityFee.ProtoReflect.Descriptor instead.
func (*PriorityFee) Descriptor() ([]byte, []int) {
	return file_dynamicpricing_v1_response_dto_proto_rawDescGZIP(), []int{11}
}

func (x *PriorityFee) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PriorityFee) GetType() PriorityFeeType {
	if x != nil {
		return x.Type
	}
	return PriorityFeeType_PRIORITY_FEE_TYPE_INVALID
}

var File_dynamicpricing_v1_response_dto_proto protoreflect.FileDescriptor

var file_dynamicpricing_v1_response_dto_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x03, 0x0a, 0x09, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x46, 0x65, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x65, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x65, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x65, 0x65, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x65, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46,
	0x65, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x65, 0x65, 0x22,
	0x96, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x46, 0x65, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4f, 0x0a, 0x14, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xad, 0x02, 0x0a, 0x12, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52,
	0x0a, 0x16, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc1, 0x01,
	0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x52, 0x0d, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x7c, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0f,
	0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x33, 0x0a,
	0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x26, 0x0a, 0x0f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5b, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x95, 0x01, 0x0a,
	0x16, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x49, 0x4e, 0x49, 0x4d,
	0x55, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x27, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x4d,
	0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46,
	0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x52, 0x10, 0x02, 0x2a, 0x51, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x52, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x42, 0x89, 0x01, 0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x68, 0x65, 0x72, 0x6f, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x42, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x68, 0x65, 0x72, 0x6f, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dynamicpricing_v1_response_dto_proto_rawDescOnce sync.Once
	file_dynamicpricing_v1_response_dto_proto_rawDescData = file_dynamicpricing_v1_response_dto_proto_rawDesc
)

func file_dynamicpricing_v1_response_dto_proto_rawDescGZIP() []byte {
	file_dynamicpricing_v1_response_dto_proto_rawDescOnce.Do(func() {
		file_dynamicpricing_v1_response_dto_proto_rawDescData = protoimpl.X.CompressGZIP(file_dynamicpricing_v1_response_dto_proto_rawDescData)
	})
	return file_dynamicpricing_v1_response_dto_proto_rawDescData
}

var file_dynamicpricing_v1_response_dto_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_dynamicpricing_v1_response_dto_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_dynamicpricing_v1_response_dto_proto_goTypes = []interface{}{
	(MinimumDeliveryFeeType)(0),    // 0: dynamicpricing.v1.MinimumDeliveryFeeType
	(ServiceFeeType)(0),            // 1: dynamicpricing.v1.ServiceFeeType
	(FeeReasonType)(0),             // 2: dynamicpricing.v1.FeeReasonType
	(PriorityFeeType)(0),           // 3: dynamicpricing.v1.PriorityFeeType
	(*VendorFee)(nil),              // 4: dynamicpricing.v1.VendorFee
	(*DeliveryFee)(nil),            // 5: dynamicpricing.v1.DeliveryFee
	(*BasketValueFee)(nil),         // 6: dynamicpricing.v1.BasketValueFee
	(*MinimumDeliveryFee)(nil),     // 7: dynamicpricing.v1.MinimumDeliveryFee
	(*StandardFee)(nil),            // 8: dynamicpricing.v1.StandardFee
	(*MinimumOrderValue)(nil),      // 9: dynamicpricing.v1.MinimumOrderValue
	(*SmallOrderFee)(nil),          // 10: dynamicpricing.v1.SmallOrderFee
	(*ServiceFee)(nil),             // 11: dynamicpricing.v1.ServiceFee
	(*FeeReason)(nil),              // 12: dynamicpricing.v1.FeeReason
	(*Customer)(nil),               // 13: dynamicpricing.v1.Customer
	(*MetaData)(nil),               // 14: dynamicpricing.v1.MetaData
	(*PriorityFee)(nil),            // 15: dynamicpricing.v1.PriorityFee
	(*wrapperspb.DoubleValue)(nil), // 16: google.protobuf.DoubleValue
}
var file_dynamicpricing_v1_response_dto_proto_depIdxs = []int32{
	5,  // 0: dynamicpricing.v1.VendorFee.delivery_fee:type_name -> dynamicpricing.v1.DeliveryFee
	9,  // 1: dynamicpricing.v1.VendorFee.minimum_order_value:type_name -> dynamicpricing.v1.MinimumOrderValue
	11, // 2: dynamicpricing.v1.VendorFee.service_fee:type_name -> dynamicpricing.v1.ServiceFee
	12, // 3: dynamicpricing.v1.VendorFee.fee_reason:type_name -> dynamicpricing.v1.FeeReason
	14, // 4: dynamicpricing.v1.VendorFee.metadata:type_name -> dynamicpricing.v1.MetaData
	15, // 5: dynamicpricing.v1.VendorFee.priority_fee:type_name -> dynamicpricing.v1.PriorityFee
	6,  // 6: dynamicpricing.v1.DeliveryFee.basket_value_fee:type_name -> dynamicpricing.v1.BasketValueFee
	7,  // 7: dynamicpricing.v1.DeliveryFee.minimum_delivery_fee:type_name -> dynamicpricing.v1.MinimumDeliveryFee
	8,  // 8: dynamicpricing.v1.DeliveryFee.standard_fee:type_name -> dynamicpricing.v1.StandardFee
	16, // 9: dynamicpricing.v1.BasketValueFee.next_fee_value:type_name -> google.protobuf.DoubleValue
	16, // 10: dynamicpricing.v1.BasketValueFee.next_threshold:type_name -> google.protobuf.DoubleValue
	16, // 11: dynamicpricing.v1.BasketValueFee.difference_threshold:type_name -> google.protobuf.DoubleValue
	0,  // 12: dynamicpricing.v1.MinimumDeliveryFee.type:type_name -> dynamicpricing.v1.MinimumDeliveryFeeType
	16, // 13: dynamicpricing.v1.MinimumDeliveryFee.basket_value_threshold:type_name -> google.protobuf.DoubleValue
	16, // 14: dynamicpricing.v1.MinimumDeliveryFee.delivery_fee_total:type_name -> google.protobuf.DoubleValue
	16, // 15: dynamicpricing.v1.MinimumDeliveryFee.discount:type_name -> google.protobuf.DoubleValue
	10, // 16: dynamicpricing.v1.MinimumOrderValue.small_order_fee:type_name -> dynamicpricing.v1.SmallOrderFee
	1,  // 17: dynamicpricing.v1.ServiceFee.type:type_name -> dynamicpricing.v1.ServiceFeeType
	2,  // 18: dynamicpricing.v1.FeeReason.fee_reason_type:type_name -> dynamicpricing.v1.FeeReasonType
	3,  // 19: dynamicpricing.v1.PriorityFee.type:type_name -> dynamicpricing.v1.PriorityFeeType
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_dynamicpricing_v1_response_dto_proto_init() }
func file_dynamicpricing_v1_response_dto_proto_init() {
	if File_dynamicpricing_v1_response_dto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dynamicpricing_v1_response_dto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasketValueFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinimumDeliveryFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinimumOrderValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallOrderFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynamicpricing_v1_response_dto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dynamicpricing_v1_response_dto_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dynamicpricing_v1_response_dto_proto_goTypes,
		DependencyIndexes: file_dynamicpricing_v1_response_dto_proto_depIdxs,
		EnumInfos:         file_dynamicpricing_v1_response_dto_proto_enumTypes,
		MessageInfos:      file_dynamicpricing_v1_response_dto_proto_msgTypes,
	}.Build()
	File_dynamicpricing_v1_response_dto_proto = out.File
	file_dynamicpricing_v1_response_dto_proto_rawDesc = nil
	file_dynamicpricing_v1_response_dto_proto_goTypes = nil
	file_dynamicpricing_v1_response_dto_proto_depIdxs = nil
}
