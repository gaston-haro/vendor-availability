// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: timeestimation/v1/debug_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DebugAPI_DebugSingleVendorEstimation_FullMethodName    = "/timeestimation.v1.DebugAPI/DebugSingleVendorEstimation"
	DebugAPI_DebugMultipleVendorsEstimation_FullMethodName = "/timeestimation.v1.DebugAPI/DebugMultipleVendorsEstimation"
)

// DebugAPIClient is the client API for DebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugAPIClient interface {
	// Retrieve time estimation information for single vendor in debug mode.
	DebugSingleVendorEstimation(ctx context.Context, in *DebugSingleVendorEstimationRequest, opts ...grpc.CallOption) (*DebugSingleVendorEstimationResponse, error)
	// Retrieve time estimation information for multiple vendors in debug mode.
	DebugMultipleVendorsEstimation(ctx context.Context, in *DebugMultipleVendorsEstimationRequest, opts ...grpc.CallOption) (*DebugMultipleVendorsEstimationResponse, error)
}

type debugAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugAPIClient(cc grpc.ClientConnInterface) DebugAPIClient {
	return &debugAPIClient{cc}
}

func (c *debugAPIClient) DebugSingleVendorEstimation(ctx context.Context, in *DebugSingleVendorEstimationRequest, opts ...grpc.CallOption) (*DebugSingleVendorEstimationResponse, error) {
	out := new(DebugSingleVendorEstimationResponse)
	err := c.cc.Invoke(ctx, DebugAPI_DebugSingleVendorEstimation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugAPIClient) DebugMultipleVendorsEstimation(ctx context.Context, in *DebugMultipleVendorsEstimationRequest, opts ...grpc.CallOption) (*DebugMultipleVendorsEstimationResponse, error) {
	out := new(DebugMultipleVendorsEstimationResponse)
	err := c.cc.Invoke(ctx, DebugAPI_DebugMultipleVendorsEstimation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugAPIServer is the server API for DebugAPI service.
// All implementations must embed UnimplementedDebugAPIServer
// for forward compatibility
type DebugAPIServer interface {
	// Retrieve time estimation information for single vendor in debug mode.
	DebugSingleVendorEstimation(context.Context, *DebugSingleVendorEstimationRequest) (*DebugSingleVendorEstimationResponse, error)
	// Retrieve time estimation information for multiple vendors in debug mode.
	DebugMultipleVendorsEstimation(context.Context, *DebugMultipleVendorsEstimationRequest) (*DebugMultipleVendorsEstimationResponse, error)
	mustEmbedUnimplementedDebugAPIServer()
}

// UnimplementedDebugAPIServer must be embedded to have forward compatible implementations.
type UnimplementedDebugAPIServer struct {
}

func (UnimplementedDebugAPIServer) DebugSingleVendorEstimation(context.Context, *DebugSingleVendorEstimationRequest) (*DebugSingleVendorEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugSingleVendorEstimation not implemented")
}
func (UnimplementedDebugAPIServer) DebugMultipleVendorsEstimation(context.Context, *DebugMultipleVendorsEstimationRequest) (*DebugMultipleVendorsEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugMultipleVendorsEstimation not implemented")
}
func (UnimplementedDebugAPIServer) mustEmbedUnimplementedDebugAPIServer() {}

// UnsafeDebugAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugAPIServer will
// result in compilation errors.
type UnsafeDebugAPIServer interface {
	mustEmbedUnimplementedDebugAPIServer()
}

func RegisterDebugAPIServer(s grpc.ServiceRegistrar, srv DebugAPIServer) {
	s.RegisterService(&DebugAPI_ServiceDesc, srv)
}

func _DebugAPI_DebugSingleVendorEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugSingleVendorEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugAPIServer).DebugSingleVendorEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugAPI_DebugSingleVendorEstimation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugAPIServer).DebugSingleVendorEstimation(ctx, req.(*DebugSingleVendorEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugAPI_DebugMultipleVendorsEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugMultipleVendorsEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugAPIServer).DebugMultipleVendorsEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugAPI_DebugMultipleVendorsEstimation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugAPIServer).DebugMultipleVendorsEstimation(ctx, req.(*DebugMultipleVendorsEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DebugAPI_ServiceDesc is the grpc.ServiceDesc for DebugAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebugAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeestimation.v1.DebugAPI",
	HandlerType: (*DebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DebugSingleVendorEstimation",
			Handler:    _DebugAPI_DebugSingleVendorEstimation_Handler,
		},
		{
			MethodName: "DebugMultipleVendorsEstimation",
			Handler:    _DebugAPI_DebugMultipleVendorsEstimation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timeestimation/v1/debug_api.proto",
}
