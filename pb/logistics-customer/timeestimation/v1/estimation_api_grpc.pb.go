// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: timeestimation/v1/estimation_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EstimationAPI_MultipleVendorsEstimation_FullMethodName = "/timeestimation.v1.EstimationAPI/MultipleVendorsEstimation"
	EstimationAPI_SingleVendorEstimation_FullMethodName    = "/timeestimation.v1.EstimationAPI/SingleVendorEstimation"
)

// EstimationAPIClient is the client API for EstimationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimationAPIClient interface {
	// Retrieve time estimation information for multiple vendors.
	MultipleVendorsEstimation(ctx context.Context, in *MultipleVendorsEstimationRequest, opts ...grpc.CallOption) (*MultipleVendorsEstimationResponse, error)
	// Retrieve time estimation information for a single vendor.
	SingleVendorEstimation(ctx context.Context, in *SingleVendorEstimationRequest, opts ...grpc.CallOption) (*SingleVendorEstimationResponse, error)
}

type estimationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimationAPIClient(cc grpc.ClientConnInterface) EstimationAPIClient {
	return &estimationAPIClient{cc}
}

func (c *estimationAPIClient) MultipleVendorsEstimation(ctx context.Context, in *MultipleVendorsEstimationRequest, opts ...grpc.CallOption) (*MultipleVendorsEstimationResponse, error) {
	out := new(MultipleVendorsEstimationResponse)
	err := c.cc.Invoke(ctx, EstimationAPI_MultipleVendorsEstimation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimationAPIClient) SingleVendorEstimation(ctx context.Context, in *SingleVendorEstimationRequest, opts ...grpc.CallOption) (*SingleVendorEstimationResponse, error) {
	out := new(SingleVendorEstimationResponse)
	err := c.cc.Invoke(ctx, EstimationAPI_SingleVendorEstimation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstimationAPIServer is the server API for EstimationAPI service.
// All implementations must embed UnimplementedEstimationAPIServer
// for forward compatibility
type EstimationAPIServer interface {
	// Retrieve time estimation information for multiple vendors.
	MultipleVendorsEstimation(context.Context, *MultipleVendorsEstimationRequest) (*MultipleVendorsEstimationResponse, error)
	// Retrieve time estimation information for a single vendor.
	SingleVendorEstimation(context.Context, *SingleVendorEstimationRequest) (*SingleVendorEstimationResponse, error)
	mustEmbedUnimplementedEstimationAPIServer()
}

// UnimplementedEstimationAPIServer must be embedded to have forward compatible implementations.
type UnimplementedEstimationAPIServer struct {
}

func (UnimplementedEstimationAPIServer) MultipleVendorsEstimation(context.Context, *MultipleVendorsEstimationRequest) (*MultipleVendorsEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultipleVendorsEstimation not implemented")
}
func (UnimplementedEstimationAPIServer) SingleVendorEstimation(context.Context, *SingleVendorEstimationRequest) (*SingleVendorEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleVendorEstimation not implemented")
}
func (UnimplementedEstimationAPIServer) mustEmbedUnimplementedEstimationAPIServer() {}

// UnsafeEstimationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimationAPIServer will
// result in compilation errors.
type UnsafeEstimationAPIServer interface {
	mustEmbedUnimplementedEstimationAPIServer()
}

func RegisterEstimationAPIServer(s grpc.ServiceRegistrar, srv EstimationAPIServer) {
	s.RegisterService(&EstimationAPI_ServiceDesc, srv)
}

func _EstimationAPI_MultipleVendorsEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleVendorsEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimationAPIServer).MultipleVendorsEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EstimationAPI_MultipleVendorsEstimation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimationAPIServer).MultipleVendorsEstimation(ctx, req.(*MultipleVendorsEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimationAPI_SingleVendorEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleVendorEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimationAPIServer).SingleVendorEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EstimationAPI_SingleVendorEstimation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimationAPIServer).SingleVendorEstimation(ctx, req.(*SingleVendorEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EstimationAPI_ServiceDesc is the grpc.ServiceDesc for EstimationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstimationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeestimation.v1.EstimationAPI",
	HandlerType: (*EstimationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MultipleVendorsEstimation",
			Handler:    _EstimationAPI_MultipleVendorsEstimation_Handler,
		},
		{
			MethodName: "SingleVendorEstimation",
			Handler:    _EstimationAPI_SingleVendorEstimation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timeestimation/v1/estimation_api.proto",
}
